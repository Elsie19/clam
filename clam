#!/bin/bash

CLAM_VERSION="0.0.1"

# Colors
BOLD=$(tput bold)
export BOLD
NORMAL=$(tput sgr0)
export NORMAL
export NC='\033[0m'

# Regular Colors
export BLACK='\033[0;30m'  # Black
export RED='\033[0;31m'    # Red
export GREEN='\033[0;32m'  # Green
export YELLOW='\033[0;33m' # Yellow
export BLUE='\033[0;34m'   # Blue
export PURPLE='\033[0;35m' # Purple
export CYAN='\033[0;36m'   # Cyan
export WHITE='\033[0;37m'  # White

# Bold
export BBlack='\033[1;30m'  # Black
export BRed='\033[1;31m'    # Red
export BGreen='\033[1;32m'  # Green
export BYellow='\033[1;33m' # Yellow
export BBlue='\033[1;34m'   # Blue
export BPurple='\033[1;35m' # Purple
export BCyan='\033[1;36m'   # Cyan
export BWhite='\033[1;37m'  # White

function msg() {
    echo -e "${BWhite}::${NC} $*"
}

function help_print() {
    local shortname="$(basename "$0")"
    echo -e "${shortname}, version 0.0.1"
    echo -e "Usage: ${shortname} [option]"
    echo -e "Options:"
    echo -e "\tnew [name] -- create project called 'name'"
    echo -e "\tcompile -- compile project"
    echo -e "\t\t--release -- with release"
    echo -e "\t\t--debug -- with debug (default)"
    echo -e "\trun -- compile project, then run it"
    echo -e "\tfmt -- format project files"
}

function create_application() {
    local name="$1"
    mkdir -p "${name}"
    cd "${name}"
    echo -e "enable=require-variable-braces\nenable=require-double-brackets" >> .shellcheckrc
    echo -e "build/" >> .gitignore
    mkdir -p src/
    echo -e "#!/bin/bash\n\necho 'Hello world!'\n\n# vim:set ft=sh ts=4 sw=4 et:" >> src/main.sh
    chmod +x src/main.sh
    git init > /dev/null
    git add .
}

case "${1}" in
    new)
        create_application "${2:?}"
        msg "Created appliation \`${2}\`"
        ;;
    compile)
        shift
        if [[ ! -f src/main.sh ]]; then
            msg 'No file `src/main.sh` found!'
            exit 1
        fi
        if [[ ${1} == "--release" ]]; then
            BUILDDIR="build/release/"
            shift
        else
            BUILDDIR="build/debug/"
            shift
        fi

        mkdir -p "${BUILDDIR}"
        rm -rf "${BUILDDIR:?}"/*
        (
            cd "src/"
            bash_preproc -n "main.sh" -o "../${BUILDDIR}/main.sh" -v "${CLAM_VERSION}"
        ) || exit 1
        if [[ ${1} != "--unsafe" ]]; then
            shellcheck -e SC2154 "${BUILDDIR}/main.sh" || { msg "Failed checks found!" && exit 1; }
        fi
        if [[ ${1} == "--release" ]]; then
            shfmt -mn -w "${BUILDDIR}/main.sh"
            shc -r -f "${BUILDDIR}/main.sh" -o "${BUILDDIR}/${PWD##*/}" || { msg "Failed to compile binary!" && exit 1; }
            rm -f "${BUILDDIR}/main.sh.x.c" "${BUILDDIR}/main.sh"
        else
            mv "${BUILDDIR}/main.sh" "${BUILDDIR}/${PWD##*/}"
            chmod +x "${BUILDDIR}/${PWD##*/}"
        fi
        msg "Compiled \`${BGreen}${PWD}/${BUILDDIR}${PWD##*/}${NC}\`"
        ;;
    fmt)
        if [[ ! -f src/main.sh ]]; then
            msg 'No file `src/main.sh` found!'
            exit 1
        fi
        shfmt -bn -ci -sr -s -i 4 -w src/*.sh || exit $?
        msg "Done formatting" src/*.sh
        ;;
    run)
        "$0" compile "${@}" || exit $?
        echo -e "\n===[ ${GREEN}Running ${PWD##*/}${NC} ]===\n"
        time ./build/debug/"${PWD##*/}"
        err=$?
        if ((err == 0)); then
            COLOR="${GREEN}"
        else
            COLOR="${RED}"
        fi
        echo -e "\n===[ ${COLOR}Finished ${PWD##*/}${NC} ]===\n"
        echo -e "Exited with error code: $err"
        exit "$err"
        ;;
    docs)
        if [[ ! -f src/main.sh ]]; then
            msg 'No file `src/main.sh` found!'
            exit 1
        fi
        mkdir -p docs/
        for docfile in src/*.sh; do
            shdoc < "${docfile}" > "docs/$(basename "$docfile" .sh).md"
        done
        msg "Done generating docs for" src/*.sh
        ;;
    *)
        help_print
        exit
        ;;
esac
